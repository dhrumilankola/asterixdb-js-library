const dotenv = require('dotenv');
const { fetchAllMetadata, extractMetadata } = require('../asterixdb/asterixdb');
const axios = require('axios');

dotenv.config();

const MODEL_NAME = 'pxlksr/defog_sqlcoder-7b-2:Q4_0';
const OLLAMA_API_URL = 'http://127.0.0.1:11434/api/generate';
const DEFAULT_LIMIT = 1000;

/**
 * Add LIMIT clause to a SQL query if it doesn't already have one
 * @param {string} query - The SQL query
 * @param {number} limit - The maximum number of records to return
 * @returns {string} Query with LIMIT clause
 */
function ensureQueryLimit(query, limit = DEFAULT_LIMIT) {
    const cleanQuery = query.trim().replace(/;$/, '');
    const hasLimit = /\bLIMIT\s+\d+/i.test(cleanQuery);
    
    if (!hasLimit) {
        return `${cleanQuery} LIMIT ${limit};`;
    }
    
    return cleanQuery + ';';
}

/**
 * Run the Ollama model locally via the API.
 * @param {string} prompt - The input prompt for the model.
 * @returns {Promise<string>} The response generated by the model.
 */
async function queryOllama(prompt) {
    try {
        console.log("Debug: Querying Ollama server with prompt:", prompt);

        const response = await axios.post(OLLAMA_API_URL, {
            model: MODEL_NAME,
            prompt: prompt,
            stream: false
        });

        if (!response.data || !response.data.response) {
            throw new Error("Ollama API response is missing the 'response' field.");
        }

        return response.data.response.trim();
    } catch (error) {
        console.error('Error querying Ollama API:', error);
        if (error.response) {
            console.error('API Error Details:', error.response.data);
        }
        throw error;
    }
}

/**
 * Generate a SQL++ query from a natural language question.
 * @param {string} naturalQuery - The natural language question.
 * @param {string} schemaMetadata - The database schema metadata in DDL format.
 * @param {number} limit - Maximum number of records to return
 * @returns {Promise<string>} The generated SQL++ query.
 */
async function generateSQLpp(naturalQuery, schemaMetadata, limit = DEFAULT_LIMIT) {
    try {
        const prompt = `### Task
Generate a SQL++ query to answer [QUESTION]${naturalQuery}[/QUESTION]

### Database Schema
The query will run on a database with the following schema:
${schemaMetadata}

### Answer
Given the database schema, here is the SQL++ query that [QUESTION]${naturalQuery}[/QUESTION]
[SQL++]`;

        const sqlppQuery = await queryOllama(prompt);

        const cleanedQuery = sqlppQuery
            .replace(/```sql/gi, '')
            .replace(/```/g, '')
            .trim();

        const queryWithLimit = ensureQueryLimit(cleanedQuery, limit);
        console.log("Debug: Generated SQL++ query with limit:", queryWithLimit);
        
        return queryWithLimit;
    } catch (error) {
        console.error('Error generating SQL++ query:', error.message);
        throw error;
    }
}

/**
 * Generate a query for user verification without executing it.
 * @param {string} dataverseName - The name of the dataverse.
 * @param {string} naturalQuery - The natural language query.
 * @param {number} limit - Maximum number of records to return
 * @returns {Promise<Object>} Object containing the generated query and metadata
 */
async function generateVerifiableQuery(dataverseName, naturalQuery, limit = DEFAULT_LIMIT) {
    try {
        console.log("Debug: Fetching metadata...");
        const rawMetadata = await fetchAllMetadata(dataverseName);
        const metadata = extractMetadata(rawMetadata);

        if (!metadata?.length) {
            throw new Error(`No metadata found for dataverse: ${dataverseName}`);
        }

        console.log("Debug: Generating SQL++ query...");
        const sqlppQuery = await generateSQLpp(naturalQuery, JSON.stringify(metadata), limit);

        return {
            query: sqlppQuery,
            metadata: metadata,
            dataverseName: dataverseName,
            naturalQuery: naturalQuery,
            limit: limit,
            timestamp: new Date().toISOString()
        };
    } catch (error) {
        console.error('Query generation failed:', error.message);
        throw error;
    }
}

module.exports = {
    generateVerifiableQuery,
    ensureQueryLimit,
    DEFAULT_LIMIT
};